	> Web Container
	> Once project is wrapped using docker, all of project related dependencies, plugins etc are present with docker
	> You can runt it at any remote machine without careing for its environment.

	> Installation
	> curl -fsSL https://get.docker.com/ | sh
	> https://docs.docker.com/engine/getstarted/linux_install_help/
	> https://docs.docker.com/engine/getstarted/

> Important:

> Install from 

 https://docs.docker.com/engine/installation/linux/ubuntu/#install-using-the-repository
# sudo apt-get install apt-transport-https ca-certificates curl software-properties-common

# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

# sudo apt-key fingerprint 0EBFCD88

# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

# sudo apt-get update

# sudo apt-get install docker-ce

# apt-cache madison docker-ce

# sudo docker run hello-world


> Share images, automate workflows, and more with a free Docker ID:
 https://cloud.docker.com/

> For more examples and ideas, visit:
 https://docs.docker.com/engine/userguide/

ubuntu1 = container name
ubuntu = image name
tag = xenial

> docker create --name=ubuntu1 ubuntu:xenial

> docker ps =  current running container

> docker ps -a = past running container

> docker rm <ID>

> Example command to get current running container
	docker run -t --name=ubuntu2 ubuntu /bin/bash

> Process running
	ps -ef | grep docker

> docker start
docker stop


> Without stopping 
docker run -it --name=ubuntu3 ubuntu /bin/bash
ctrl + p + q

> docker attach ubuntu3

> usage
	man docker
	man docker-run

> Creating deamons
	sudo gedit /etc/docker/daemon.json

 	{
	"dns": ["17X.XX.XX.13", "17X.XX.XX.12"]
}

> Get contents from containers file and commit

	docker exec alpine1 cat /datefile

	docker commit -m "Created datefile" -a "Shubham" alpine1 alpine1_datefile
new image = alpine1_datefile

> Logs of container
	docker logs alpine1

> All ids of container
docker ps -a -q

> docker history image_id

> Inspect container
	docker inspect nginx1

Default port


Change port
docker run -d --name=nginx3 -p 5000:80 nginx


MAnage by daemon
docker run -d --name=nginx4 -P nginx

> Referrence
	docs.docker.com

> Bridge network
	bridge-utils

> Shows all network drivers:
docker network ls


> Uninstall and Install docker:
	>> https://docs.docker.com/install/linux/docker-ce/ubuntu/#uninstall-old-versions
	
	>> sudo apt-get remove docker docker-engine docker.io

	>> sudo apt-get update

	>> Install packages to allow apt to use a repository over HTTPS:
	sudo apt-get install \
	    apt-transport-https \
	    ca-certificates \
	    curl \
	    software-properties-common
	
	>> Add Dockerâ€™s official GPG key:
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

	>> Verify that you now have the key with the fingerprint
	   sudo apt-key fingerprint 0EBFCD88

	>> Use the following command to set up the stable repository. You always need the stable repository, even if you want to install builds from the edge or test repositories as well. To add the edge or test repository, add the word edge or test (or both) after the word stable in the commands below.
	   Note: The lsb_release -cs sub-command below returns the name of your Ubuntu distribution, such as xenial. Sometimes, in a distribution like Linux Mint, you might need to change $(lsb_release -cs) to your parent Ubuntu distribution. For example, if you are using Linux Mint Rafaela, you could use trusty.

	 sudo add-apt-repository \
	   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
	   $(lsb_release -cs) \
	   stable"

	>>  sudo apt-get update

	>> Install the latest version of Docker CE, or go to the next step to install a specific version. Any existing installation of Docker is replaced.
		sudo apt-get install docker-ce

	>> Verify
		sudo docker run hello-world

	>> Run docker withou sudo
		sudo groupadd docker ...Create the docker group.
		sudo usermod -aG docker $USER ...Add your user to the docker group.
		Logout
		docker run hello-world ...verify

	>> Uninstall docker-compose
		sudo rm /usr/local/bin/docker-compose
		or 
		pip uninstall docker-compose
	>> Install
		sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
		sudo chmod +x /usr/local/bin/docker-compose    ....Apply executable permissions to the binary
		docker-compose version 1.19.0, build 1719ceb   ....Test


