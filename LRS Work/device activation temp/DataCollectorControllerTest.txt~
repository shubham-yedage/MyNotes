/**
 * 
 */
package Common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

import org.apache.commons.codec.binary.Base64;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Test;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import com.mashape.unirest.request.HttpRequest;

/**
 * @author synerzip
 * 
 */
public class DataCollectorControllerTest {

	Reader read = new Reader();

	/**
	 * 
	 * Get Location Guid.
	 */
	// @Test
	// public void getLocationGuid() {
	//
	// try {
	// read.logincredentials();
	// // Get account guid.
	// generateUnirestRequest("http://localhost:8080/web/v3/accounts/?limit=100&offset=0&searchQuery="
	// + read.getAccount_Name().trim());
	//
	// // Get AccountPlanProduct guid.
	// generateUnirestRequest("http://localhost:8080/web/v3/accounts/6955a74b-0140-4cfb-9c1a-82ff6f0e0e23/plan_products");
	//
	// // Get Location guid.
	// generateUnirestRequest("http://localhost:8080/web/v3/spaces?accountPlanProductGuid=484932d6-8080-4406-8913-3b827e79ed15");
	// } catch (UnirestException e) {
	// // TODO Auto-generated catch block
	// e.printStackTrace();
	// } catch (ParseException e) {
	// // TODO Auto-generated catch block
	// e.printStackTrace();
	// } catch (JsonParseException e) {
	// // TODO Auto-generated catch block
	// e.printStackTrace();
	// } catch (IOException e) {
	// // TODO Auto-generated catch block
	// e.printStackTrace();
	// }
	// }

	/**
	 * 
	 * Unirest request.
	 * 
	 * @throws UnirestException
	 * @throws ParseException
	 * @throws IOException
	 * @throws JsonParseException
	 */
	// public void generateUnirestRequest(String url) throws UnirestException,
	// ParseException, JsonParseException, IOException {
	//
	// System.setProperty("org.apache.commons.logging.Log",
	// "org.apache.commons.logging.impl.Jdk14Logger");
	// HttpRequest httpRequest = Unirest
	// .get(url)
	// .basicAuth(read.getSuper_admin_user_name(),
	// read.getSuper_admin_password())
	// .header("Cache-Control", "no-cache")
	// .header("X-Requested-With", "XMLHttpRequest").getHttpRequest();
	// HttpResponse<JsonNode> response = httpRequest.asJson();
	// System.out.println(response.getBody().toString().trim());
	//
	// // JSONObject jsonObj = new JSONObject(response.getBody().toString());
	// // System.out.println(jsonObj);
	// //
	// // System.out.println(jsonObj.get("Accounts"));
	// //
	// // JSONArray jsonArray =jsonObj.getJSONArray("Accounts");
	// // System.out.println("/n"+jsonArray.get(0));
	// // System.out.println(jsonArray.get(1));
	//
	// JsonFactory jf = new MappingJsonFactory();
	// JsonParser jp = jf.createJsonParser(response.getBody().toString());
	//
	// JsonToken current = jp.nextToken();
	// System.out.println("token"+current);
	// String accountsKey = jp.nextTextValue();
	// System.out.println("accountsKey"+accountsKey);
	// if(accountsKey.equals("Accounts")){
	// System.out.println("jp.nextValue()"+jp.nextValue());
	// }
	//
	// //JSONObject jsonArray.get(0)
	// }

	/**
	 * 
	 * Crete JSON request.
	 */
	@Test
	public void eventDumpRequest() {
		// Load properties file.
		read.logincredentials();

		// Reade from resources for inputs.
		ClassLoader classLoader = getClass().getClassLoader();
		File file = new File(classLoader.getResource(
				"Common/prodLocEventmongodump.xls").getFile());

		try {
			FileInputStream inputStream = new FileInputStream(file);
			Workbook wb = Workbook.getWorkbook(inputStream);

			// TO get the access to the sheet
			Sheet sheet = wb.getSheet(0);

			// To get the number of rows present in sheet
			int totalNoOfRows = sheet.getRows();

			// To get the number of columns present in sheet
			int totalNoOfCols = sheet.getColumns();

			Map<String, String> eventParametrs = new HashMap<>();
			for (int row = 1; row < totalNoOfRows; row++) {
				for (int col = 0; col < totalNoOfCols; col++) {
					eventParametrs.put(sheet.getCell(col, 0).getContents(),
							sheet.getCell(col, row).getContents());
				}

				/*
				 * Request Structure: { "publicKey": "String", "nonce":
				 * "String", "authToken": "String", "nonce": "String",
				 * "requestObject":{ "locationGuid": "String", "events": [{
				 * "orderGuid": "String", "spaceId": "long", "type": "String",
				 * "orderType": "String", "orderStarted": "String",
				 * "orderLocated": "String", "orderCleared": "String", "puckId":
				 * "String", }
				 */

				JSONObject eventObj = new JSONObject();
				eventObj.put("orderGuid", eventParametrs.get("orderGuid"));
				eventObj.put("spaceId", eventParametrs.get("spaceId"));
				eventObj.put("type", eventParametrs.get("type"));
				eventObj.put("orderType", eventParametrs.get("orderType"));
				eventObj.put("orderStarted", eventParametrs.get("orderStarted"));
				eventObj.put("orderLocated", eventParametrs.get("orderLocated"));
				eventObj.put("orderCleared", eventParametrs.get("orderCleared"));
				eventObj.put("puckId", eventParametrs.get("puckId"));

				JSONArray array = new JSONArray();
				array.put(eventObj);

				JSONObject requestObj = new JSONObject();
				requestObj.put("locationGuid",
						eventParametrs.get("locationGuid"));
				requestObj.put("events", array);
				JSONObject mainRequestObj = new JSONObject();
				mainRequestObj.put("publicKey", read.getPublicKey());
				mainRequestObj.put("nonce", getNonce());
				mainRequestObj.put("authToken", getAuthToken());
				mainRequestObj.put("requestObject", requestObj);

				// Rest-Client request using Unirest
				System.setProperty("org.apache.commons.logging.Log",
						"org.apache.commons.logging.impl.Jdk14Logger");
				HttpRequest httpRequest = Unirest
						.post("http://localhost:8080/api/collector/ttevent")
						.header("content-type", "application/json")
						.body(mainRequestObj).getHttpRequest();
				HttpResponse<JsonNode> response = httpRequest.asJson();
				System.out.println(response.getBody());
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (BiffException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidKeyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnirestException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * 
	 * Get nonce.
	 */

	public String getNonce() {
		byte[] date = read.getKeyNonce().getBytes(StandardCharsets.UTF_8);
		return Base64.encodeBase64String(date);
	}

	/**
	 * 
	 * Get AuthenticationKey.
	 */
	public String getAuthToken() throws NoSuchAlgorithmException,
			InvalidKeyException, UnsupportedEncodingException {

		SecretKeySpec key = new SecretKeySpec(read.getPrivateKey().getBytes(
				"UTF-8"), "HmacMD5");
		Mac mac = Mac.getInstance("HmacMD5");
		mac.init(key);

		byte[] bytes = mac.doFinal(getNonce().getBytes("ASCII"));
		return Base64.encodeBase64String(bytes);
	}

	/*
	 * 
	 * Get events response for comparison.
	 */
	public void getEvents() {
		try {
			read.logincredentials();
			System.setProperty("org.apache.commons.logging.Log",
					"org.apache.commons.logging.impl.Jdk14Logger");

			// Get Authorization key.
			HttpRequest httpRequest = Unirest.post(
					"http://localhost:8080/rest/v3/oauth/token?client_id="
							+ read.getClientId() + "&client_secret="
							+ read.getClientSecret() + "&grant_type="
							+ read.getGrantType()).getHttpRequest();
			HttpResponse<JsonNode> response = httpRequest.asJson();
			JsonObject object = new JsonParser().parse(
					response.getBody().toString()).getAsJsonObject();
			String access_token = object.get("access_token").getAsString();
			System.out.println(access_token);

			// HttpRequest httpRequest2 = Unirest
			// .get("http://localhost:8080/web/v3/reports/csv?queryTypes=TABLE_TRACKER_SUMMARY_DAILY_VIEW&dateFrom=2016-07-23&dateTo=2016-08-21&locationIds=all&reportSetIds=&accountGuid=6955a74b-0140-4cfb-9c1a-82ff6f0e0e23&goal=90")
			// .header("Authorization", "Bearer" + access_token)
			// .getHttpRequest();
		} catch (UnirestException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}

