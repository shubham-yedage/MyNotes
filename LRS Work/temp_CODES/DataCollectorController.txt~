/**
 * 
 */
package Common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

import org.apache.commons.io.IOUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Test;

import com.google.gson.Gson;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import com.mashape.unirest.request.HttpRequest;

/**
 * @author synerzip
 * 
 */
public class DataCollectorControllerTest {
	/**
	 * 
	 * Crete JSON request.
	 */
	@Test
	public void createRequest() {
		// Reade from resources for inputs.
		ClassLoader classLoader = getClass().getClassLoader();
		File file = new File(classLoader.getResource(
				"Common/prodLocEventmongodump.xls").getFile());
		System.out.println(file.getName() + file.getAbsolutePath());

		try {
			FileInputStream inputStream = new FileInputStream(file);
			Workbook wb = Workbook.getWorkbook(inputStream);

			// TO get the access to the sheet
			Sheet sheet = wb.getSheet(0);

			// To get the number of rows present in sheet
			int totalNoOfRows = sheet.getRows();

			// To get the number of columns present in sheet
			int totalNoOfCols = sheet.getColumns();

			Map<String, String> eventParametrs = new HashMap<>();
			for (int row = 1; row < totalNoOfRows; row++) {
				for (int col = 0; col < totalNoOfCols; col++) {
					eventParametrs.put(sheet.getCell(col, 0).getContents(),
							sheet.getCell(col, row).getContents());
				}

				/*
				 * Request Structure: { "publicKey": "String", "nonce":
				 * "String", "authToken": "String", "nonce": "String",
				 * "requestObject":{ "locationGuid": "String", "events": [{
				 * "orderGuid": "String", "spaceId": "long", "type": "String",
				 * "orderType": "String", "orderStarted": "String",
				 * "orderLocated": "String", "orderCleared": "String", "puckId":
				 * "String", }
				 */

				Gson gson = new Gson();
				String eventObj = gson.toJson(new Event(eventParametrs
						.get("orderGuid"), eventParametrs.get("spaceId"),
						eventParametrs.get("type"), eventParametrs
								.get("orderType"), eventParametrs
								.get("orderStarted"), eventParametrs
								.get("orderLocated"), eventParametrs
								.get("orderCleared"), eventParametrs
								.get("puckId")));

				// JSONObject eventObj = new JSONObject();
				// eventObj.put("orderGuid", eventParametrs.get("orderGuid"));
				// eventObj.put("spaceId", eventParametrs.get("spaceId"));
				// eventObj.put("type", eventParametrs.get("type"));
				// eventObj.put("orderType", eventParametrs.get("orderType"));
				// eventObj.put("orderStarted",
				// eventParametrs.get("orderStarted"));
				// eventObj.put("orderLocated",
				// eventParametrs.get("orderLocated"));
				// eventObj.put("orderCleared",
				// eventParametrs.get("orderCleared"));
				// eventObj.put("puckId", eventParametrs.get("puckId"));

				JSONArray array = new JSONArray();
				array.put(eventObj);

				String requestObj = gson.toJson(new Event(eventParametrs
						.get("locationGuid"), array));

				// JSONObject requestObj = new JSONObject();
				// requestObj.put("locationGuid",
				// eventParametrs.get("locationGuid"));
				// requestObj.put("events", array);

				String mainRequestObj = gson.toJson(new Event(eventParametrs
						.get("publicKey"), eventParametrs.get("nonce"),
						eventParametrs.get("authToken"), requestObj));
				// JSONObject mainReqObj = new JSONObject();
				// mainReqObj.put("publicKey", eventParametrs.get("publicKey"));
				// mainReqObj.put("nonce", eventParametrs.get("nonce"));
				// mainReqObj.put("authToken", eventParametrs.get("authToken"));
				// mainReqObj.put("requestObject", requestObj);
				System.out.println(mainRequestObj);

				// Rest-Client request using Unirest

				// System.setProperty("org.apache.commons.logging.Log",
				// "org.apache.commons.logging.impl.Jdk14Logger");
				// HttpRequest httpRequest = Unirest
				// .post("http://localhost:8080/api/collector/ttevent")
				// .body(mainRequestObj).getHttpRequest();
				// HttpResponse<JsonNode> response = httpRequest.asJson();
				// System.out.println(response.getBody());
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (BiffException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private class Event {
		private String orderGuid;
		private String spaceId;
		private String type;
		private String orderType;
		private String orderStarted;
		private String orderLocated;
		private String orderCleared;
		private String puckId;
		private String locationGuid;
		private JSONArray event;
		private String publicKey;
		private String nonce;
		private String authToken;
		private String requestObject;

		public Event(String orderGuid, String spaceId, String type,
				String orderType, String orderStarted, String orderLocated,
				String orderCleared, String puckId) {
			super();
			this.orderGuid = orderGuid;
			this.spaceId = spaceId;
			this.type = type;
			this.orderType = orderType;
			this.orderStarted = orderStarted;
			this.orderLocated = orderLocated;
			this.orderCleared = orderCleared;
			this.puckId = puckId;
		}

		public Event(String locationGuid, JSONArray array) {
			super();
			this.locationGuid = locationGuid;
			this.event = array;
		}

		public Event(String publicKey, String nonce, String authToken,
				String requestObject) {
			super();
			this.publicKey = publicKey;
			this.nonce = nonce;
			this.authToken = authToken;
			this.requestObject = requestObject;
		}

	}
}

